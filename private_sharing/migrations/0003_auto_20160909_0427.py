# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-09-09 04:27
from __future__ import unicode_literals

from string import digits  # pylint: disable=deprecated-module

from django.db import migrations

from common.utils import generate_id


def migrate_go_viral_files(apps, *args):
    Member = apps.get_model('open_humans', 'Member')
    DataFile = apps.get_model('data_import', 'DataFile')
    OnSiteDataRequestProject = apps.get_model('private_sharing',
                                              'OnSiteDataRequestProject')
    DataRequestProjectMember = apps.get_model('private_sharing',
                                              'DataRequestProjectMember')
    ProjectDataFile = apps.get_model('private_sharing', 'ProjectDataFile')
    UserData = apps.get_model('go_viral', 'UserData')

    try:
        rumi = Member.objects.get(user__username='rumichunara')
    except Member.DoesNotExist:
        return

    def random_id():
        code = generate_id(size=8, chars=digits)

        while DataRequestProjectMember.objects.filter(
                project_member_id=code).count() > 0:
            code = generate_id(size=8, chars=digits)

        return code

    project = OnSiteDataRequestProject(
        is_study=True,
        name='GoViral (2014-2016)',
        slug='go-viral-archive',
        leader='Dr. Rumi Chunara',
        organization='NYU Polytechnic School of Engineering',
        is_academic_or_nonprofit=True,
        contact_email='rumi.chunara@nyu.edu',
        info_url='https://www.goviralstudy.com/',
        short_description="""Participants in this viral surveillance study can
        get kits, then send a sample if they get sick.""",
        long_description="""Participants in this viral surveillance study can
        get kits, then send a sample if they get sick. When possible, your
        analysis data is returned!""",
        returned_data_description="""Sickness reports contain survey data from
        GoViral. Viral profiling data contains raw viral test results.""",
        active=False,
        coordinator=rumi,
        request_message_permission=False,
        request_username_access=False,
        approved=True,
        post_sharing_url='',
        consent_text='')

    project.save()

    for data_file in DataFile.objects.filter(source='go_viral'):
        project_file = ProjectDataFile(
            direct_sharing_project=project,
            file=data_file.file,
            created=data_file.created,
            metadata=data_file.metadata,
            source='direct-sharing-{}'.format(project.id),
            user=data_file.user,
            archived=data_file.archived)

        project_file.save()

    DataFile.objects.filter(source='go_viral').delete()

    for user_data in UserData.objects.all():
        if not user_data.data.get('goViralId', None):
            continue

        member = DataRequestProjectMember(
            member=user_data.user.member,
            project_member_id=random_id(),
            project=project,
            consent_text='',
            joined=True,
            authorized=True)

        member.save()


class Migration(migrations.Migration):

    dependencies = [
        ('private_sharing', '0002_add_project_data_file'),
    ]

    operations = [
        migrations.RunPython(migrate_go_viral_files),
    ]
